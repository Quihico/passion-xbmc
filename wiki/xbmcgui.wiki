{| summary="heading" width="100%" cellpadding="2"
|- bgcolor="#7799ee"
| valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><br /><big><big>'''xbmcgui'''</big></big> (version 1.2, 14 July 2006)</font>
| align="right" valign="bottom" | <font color="#ffffff" face="helvetica, arial">[. index]<br />(built-in)</font>
|}

{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ee77aa"
| colspan="3" valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><big>'''Classes'''</big></font>
|-
| bgcolor="#ee77aa" |
| width="100%" |
; <font face="helvetica, arial">[__builtin__.html#object __builtin__.object] </font>
: ;; <font face="helvetica, arial">[xbmcgui.html#Action Action] </font>
;; <font face="helvetica, arial">[xbmcgui.html#Dialog Dialog] </font>
;; <font face="helvetica, arial">[xbmcgui.html#DialogProgress DialogProgress] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ListItem ListItem] </font>
;; <font face="helvetica, arial">[xbmcgui.html#Window Window] </font>
:: ;;; <font face="helvetica, arial">[xbmcgui.html#WindowDialog WindowDialog] </font>
;;; <font face="helvetica, arial">[xbmcgui.html#WindowXML WindowXML] </font>
::: ;;;; <font face="helvetica, arial">[xbmcgui.html#WindowXMLDialog WindowXMLDialog] </font>
; <font face="helvetica, arial">Control([__builtin__.html#object __builtin__.object]) </font>
: ;; <font face="helvetica, arial">[xbmcgui.html#ControlButton ControlButton] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlCheckMark ControlCheckMark] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlFadeLabel ControlFadeLabel] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlGroup ControlGroup] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlImage ControlImage] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlLabel ControlLabel] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlList ControlList] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlProgress ControlProgress] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlRadioButton ControlRadioButton] </font>
;; <font face="helvetica, arial">[xbmcgui.html#ControlTextBox ControlTextBox] </font>{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''Action'''([__builtin__.html#object __builtin__.object])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#Action Action] class.<br /><br /> For backwards compatibility reasons the == operator is extended so that itcan compare an action with other actions and action.id with numbers example: (action == ACTION_MOVE_LEFT)<br /></tt>
|-
| width="100%" |
Methods defined here:<br />
; '''__eq__'''(...)
: <tt>x.[#Action-__eq__ __eq__](y) <==> x==y</tt>
; '''__ge__'''(...)
: <tt>x.[#Action-__ge__ __ge__](y) <==> x>=y</tt>
; '''__gt__'''(...)
: <tt>x.[#Action-__gt__ __gt__](y) <==> x>y</tt>
; '''__le__'''(...)
: <tt>x.[#Action-__le__ __le__](y) <==> x<=y</tt>
; '''__lt__'''(...)
: <tt>x.[#Action-__lt__ __lt__](y) <==> x<y</tt>
; '''__ne__'''(...)
: <tt>x.[#Action-__ne__ __ne__](y) <==> x!=y</tt>
; '''getAmount1'''(...)
: <tt>[#Action-getAmount1 getAmount1]() -- Returns the first amount of force applied to the thumbstick n.</tt>
; '''getAmount2'''(...)
: <tt>[#Action-getAmount2 getAmount2]() -- Returns the second amount of force applied to the thumbstick n.</tt>
; '''getButtonCode'''(...)
: <tt>[#Action-getButtonCode getButtonCode]() -- Returns the button code for this action.</tt>
; '''getId'''(...)
: <tt>[#Action-getId getId]() -- Returns the action's current id as a long or 0 if no action is mapped in the xml's.</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#Action-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlButton'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlButton ControlButton] class.<br /><br />[#ControlButton ControlButton](x, y, width, height, label[, focusTexture, noFocusTexture, textXOffset, textYOffset,<br /> alignment, font, textColor, disabledColor, angle, shadowColor, focusedColor])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> label : string or unicode - text string.<br /> focusTexture : [opt] string - filename for focus texture.<br /> noFocusTexture : [opt] string - filename for no focus texture.<br /> textXOffset : [opt] integer - x offset of label.<br /> textYOffset : [opt] integer - y offset of label.<br /> alignment : [opt] integer - alignment of label - *Note, see xbfont.h<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled button's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled button's label. (e.g. '0xFFFF3300')<br /> angle : [opt] integer - angle of control. (+ rotates CCW, - rotates CW)<br /> shadowColor : [opt] hexstring - color of button's label's shadow. (e.g. '0xFF000000')<br /> focusedColor : [opt] hexstring - color of focused button's label. (e.g. '0xFF00FFFF')<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''button''' = xbmcgui.[#ControlButton ControlButton](100, 250, 200, 50, 'Status', font='font14')<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlButton ControlButton]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''getLabel'''(...)
: <tt>[#ControlButton-getLabel getLabel]() -- Returns the buttons label as a unicode string.<br /><br /> example:<br /> - label = self.'''button'''.[#ControlButton-getLabel getLabel]()</tt>
; '''getLabel2'''(...)
: <tt>[#ControlButton-getLabel2 getLabel2]() -- Returns the buttons label2 as a unicode string.<br /><br /> example:<br /> - label = self.'''button'''.[#ControlButton-getLabel2 getLabel2]()</tt>
; '''setDisabledColor'''(...)
: <tt>[#ControlButton-setDisabledColor setDisabledColor](disabledColor) -- Set's this buttons disabled color.<br /><br /> disabledColor : hexstring - color of disabled button's label. (e.g. '0xFFFF3300')<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setDisabledColor setDisabledColor]('0xFFFF3300')</tt>
; '''setLabel'''(...)
: <tt>[#ControlButton-setLabel setLabel]([label, font, textColor, disabledColor, shadowColor, focusedColor]) -- Set's this buttons text attributes.<br /><br /> label : [opt] string or unicode - text string.<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled button's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled button's label. (e.g. '0xFFFF3300')<br /> shadowColor : [opt] hexstring - color of button's label's shadow. (e.g. '0xFF000000')<br /> focusedColor : [opt] hexstring - color of focused button's label. (e.g. '0xFFFFFF00')<br /> label2 : [opt] string or unicode - text string.<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setLabel setLabel]('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300', '0xFF000000')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlButton-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlButton-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlButton-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlButton-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlButton-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlButton-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlButton-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlButton-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlButton-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlButton-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlButton-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlButton-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlButton-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlButton-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlButton-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlButton-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlButton-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlButton-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlButton-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlButton-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlButton-controlUp controlUp](), [#ControlButton-controlDown controlDown](), [#ControlButton-controlLeft controlLeft](), [#ControlButton-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlButton-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlButton-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlButton-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlButton-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlButton-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlButton-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlCheckMark'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlCheckMark ControlCheckMark] class.<br /><br />[#ControlCheckMark ControlCheckMark](x, y, width, height, label[, focusTexture, noFocusTexture,<br /> checkWidth, checkHeight, alignment, font, textColor, disabledColor])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> label : string or unicode - text string.<br /> focusTexture : [opt] string - filename for focus texture.<br /> noFocusTexture : [opt] string - filename for no focus texture.<br /> checkWidth : [opt] integer - width of checkmark.<br /> checkHeight : [opt] integer - height of checkmark.<br /> alignment : [opt] integer - alignment of label - *Note, see xbfont.h<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled checkmark's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled checkmark's label. (e.g. '0xFFFF3300')<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''checkmark''' = xbmcgui.[#ControlCheckMark ControlCheckMark](100, 250, 200, 50, 'Status', font='font14')<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlCheckMark ControlCheckMark]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''getSelected'''(...)
: <tt>[#ControlCheckMark-getSelected getSelected]() -- Returns the selected status for this checkmark as a bool.<br /><br /> example:<br /> - selected = self.'''checkmark'''.[#ControlCheckMark-getSelected getSelected]()</tt>
; '''setDisabledColor'''(...)
: <tt>[#ControlCheckMark-setDisabledColor setDisabledColor](disabledColor) -- Set's this controls disabled color.<br /><br /> disabledColor : hexstring - color of disabled checkmark's label. (e.g. '0xFFFF3300')<br /><br /> example:<br /> - self.'''checkmark'''.[#ControlCheckMark-setDisabledColor setDisabledColor]('0xFFFF3300')</tt>
; '''setLabel'''(...)
: <tt>[#ControlCheckMark-setLabel setLabel](label[, font, textColor, disabledColor]) -- Set's this controls text attributes.<br /><br /> label : string or unicode - text string.<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled checkmark's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled checkmark's label. (e.g. '0xFFFF3300')<br /><br /> example:<br /> - self.'''checkmark'''.[#ControlCheckMark-setLabel setLabel]('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300')</tt>
; '''setSelected'''(...)
: <tt>[#ControlCheckMark-setSelected setSelected](isOn) -- Sets this checkmark status to on or off.<br /><br /> isOn : bool - True=selected (on) / False=not selected (off)<br /><br /> example:<br /> - self.'''checkmark'''.[#ControlCheckMark-setSelected setSelected](True)</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlCheckMark-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlCheckMark-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlCheckMark-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlCheckMark-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlCheckMark-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlCheckMark-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlCheckMark-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlCheckMark-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlCheckMark-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlCheckMark-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlCheckMark-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlCheckMark-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlCheckMark-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlCheckMark-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlCheckMark-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlCheckMark-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlCheckMark-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlCheckMark-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlCheckMark-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlCheckMark-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlCheckMark-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlCheckMark-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlCheckMark-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlCheckMark-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlCheckMark-controlUp controlUp](), [#ControlCheckMark-controlDown controlDown](), [#ControlCheckMark-controlLeft controlLeft](), [#ControlCheckMark-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlCheckMark-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlCheckMark-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlCheckMark-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlCheckMark-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlCheckMark-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlCheckMark-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlFadeLabel'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlFadeLabel ControlFadeLabel] class.<br /> Control that scroll's lables<br />[#ControlFadeLabel ControlFadeLabel](x, y, width, height[, font, textColor, alignment])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of fadelabel's labels. (e.g. '0xFFFFFFFF')<br /> alignment : [opt] integer - alignment of label - *Note, see xbfont.h<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''fadelabel''' = xbmcgui.[#ControlFadeLabel ControlFadeLabel](100, 250, 200, 50, textColor='0xFFFFFFFF')<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlFadeLabel ControlFadeLabel]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''addLabel'''(...)
: <tt>[#ControlFadeLabel-addLabel addLabel](label) -- Add a label to this control for scrolling.<br /><br /> label : string or unicode - text string.<br /><br /> example:<br /> - self.'''fadelabel'''.[#ControlFadeLabel-addLabel addLabel]('This is a line of text that can scroll.')</tt>
; '''reset'''(...)
: <tt>[#ControlFadeLabel-reset reset]() -- Clears this fadelabel.<br /><br /> example:<br /> - self.'''fadelabel'''.[#ControlFadeLabel-reset reset]()</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlFadeLabel-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlFadeLabel-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlFadeLabel-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlFadeLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlFadeLabel-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlFadeLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlFadeLabel-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlFadeLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlFadeLabel-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlFadeLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlFadeLabel-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlFadeLabel-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlFadeLabel-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlFadeLabel-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlFadeLabel-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlFadeLabel-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlFadeLabel-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlFadeLabel-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlFadeLabel-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlFadeLabel-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlFadeLabel-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlFadeLabel-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlFadeLabel-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlFadeLabel-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlFadeLabel-controlUp controlUp](), [#ControlFadeLabel-controlDown controlDown](), [#ControlFadeLabel-controlLeft controlLeft](), [#ControlFadeLabel-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlFadeLabel-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlFadeLabel-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlFadeLabel-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlFadeLabel-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlFadeLabel-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlFadeLabel-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlGroup'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlGroup ControlGroup] class.<br /><br />[#ControlGroup ControlGroup](x, y, width, height<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> example:<br /> - self.'''group''' = xbmcgui.[#ControlGroup ControlGroup](100, 250, 125, 75)<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlGroup ControlGroup]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlGroup-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlGroup-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlGroup-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlGroup-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlGroup-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlGroup-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlGroup-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlGroup-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlGroup-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlGroup-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlGroup-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlGroup-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlGroup-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlGroup-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlGroup-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlGroup-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlGroup-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlGroup-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlGroup-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlGroup-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlGroup-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlGroup-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlGroup-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlGroup-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlGroup-controlUp controlUp](), [#ControlGroup-controlDown controlDown](), [#ControlGroup-controlLeft controlLeft](), [#ControlGroup-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlGroup-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlGroup-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlGroup-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlGroup-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlGroup-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlGroup-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlImage'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlImage ControlImage] class.<br /><br />[#ControlImage ControlImage](x, y, width, height, filename[, colorKey, aspectRatio, colorDiffuse])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> filename : string - image filename.<br /> colorKey : [opt] hexString - (example, '0xFFFF3300')<br /> aspectRatio : [opt] integer - (values 0 = stretch (default), 1 = scale up (crops), 2 = scale down (black bars)colorDiffuse : hexString - (example, '0xC0FF0000' (red tint))<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''image''' = xbmcgui.[#ControlImage ControlImage](100, 250, 125, 75, aspectRatio=2)<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlImage ControlImage]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''setColorDiffuse'''(...)
: <tt>[#ControlImage-setColorDiffuse setColorDiffuse](colorDiffuse) -- Changes the images color.<br /><br /> colorDiffuse : hexString - (example, '0xC0FF0000' (red tint))<br /><br /> example:<br /> - self.'''image'''.[#ControlImage-setColorDiffuse setColorDiffuse]('0xC0FF0000')</tt>
; '''setImage'''(...)
: <tt>[#ControlImage-setImage setImage](filename, colorKey) -- Changes the image.<br /><br /> filename : string - image filename.<br /> colorKey : [opt] hexString - (example, '0xFFFF3300')<br /><br /> example:<br /> - self.'''image'''.[#ControlImage-setImage setImage]('q:\scripts\test.png', '0xFFFF3300')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlImage-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlImage-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlImage-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlImage-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlImage-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlImage-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlImage-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlImage-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlImage-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlImage-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlImage-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlImage-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlImage-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlImage-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlImage-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlImage-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlImage-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlImage-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlImage-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlImage-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlImage-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlImage-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlImage-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlImage-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlImage-controlUp controlUp](), [#ControlImage-controlDown controlDown](), [#ControlImage-controlLeft controlLeft](), [#ControlImage-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlImage-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlImage-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlImage-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlImage-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlImage-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlImage-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlLabel'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlLabel ControlLabel] class.<br /><br />[#ControlLabel ControlLabel](x, y, width, height, label[, font, textColor, <br /> disabledColor, alignment, hasPath, angle])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> label : string or unicode - text string.<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled label's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled label's label. (e.g. '0xFFFF3300')<br /> alignment : [opt] integer - alignment of label - *Note, see xbfont.h<br /> hasPath : [opt] bool - True=stores a path / False=no path.<br /> angle : [opt] integer - angle of control. (+ rotates CCW, - rotates CW)<br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''label''' = xbmcgui.[#ControlLabel ControlLabel](100, 250, 125, 75, 'Status', angle=45)<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlLabel ControlLabel]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''getLabel'''(...)
: <tt>[#ControlLabel-getLabel getLabel]() -- Returns the text value for this label.<br /><br /> example:<br /> - label = self.'''label'''.[#ControlLabel-getLabel getLabel]()</tt>
; '''setLabel'''(...)
: <tt>[#ControlLabel-setLabel setLabel](label) -- Set's text for this label.<br /><br /> label : string or unicode - text string.<br /><br /> example:<br /> - self.'''label'''.[#ControlLabel-setLabel setLabel]('Status')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlLabel-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlLabel-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlLabel-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlLabel-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlLabel-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlLabel-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlLabel-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlLabel-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlLabel-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlLabel-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlLabel-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlLabel-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlLabel-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlLabel-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlLabel-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlLabel-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlLabel-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlLabel-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlLabel-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlLabel-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlLabel-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlLabel-controlUp controlUp](), [#ControlLabel-controlDown controlDown](), [#ControlLabel-controlLeft controlLeft](), [#ControlLabel-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlLabel-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlLabel-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlLabel-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlLabel-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlLabel-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlLabel-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlList'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlList ControlList] class.<br /><br />[#ControlList ControlList](x, y, width, height[, font, textColor, buttonTexture, buttonFocusTexture,<br /> selectedColor, imageWidth, imageHeight, itemTextXOffset, itemTextYOffset,<br /> itemHeight, space, alignmentY])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> font : [opt] string - font used for items label. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of items label. (e.g. '0xFFFFFFFF')<br /> buttonTexture : [opt] string - filename for focus texture.<br /> buttonFocusTexture : [opt] string - filename for no focus texture.<br /> selectedColor : [opt] integer - x offset of label.<br /> imageWidth : [opt] integer - width of items icon or thumbnail.<br /> imageHeight : [opt] integer - height of items icon or thumbnail.<br /> itemTextXOffset : [opt] integer - x offset of items label.<br /> itemTextYOffset : [opt] integer - y offset of items label.<br /> itemHeight : [opt] integer - height of items.<br /> space : [opt] integer - space between items.<br /> alignmentY : [opt] integer - Y-axis alignment of items label - *Note, see xbfont.h<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''cList''' = xbmcgui.[#ControlList ControlList](100, 250, 200, 250, 'font14', space=5)<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlList ControlList]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''addItem'''(...)
: <tt>[#ControlList-addItem addItem](item) -- Add a new item to this control list.<br /><br /> item : string, unicode or [#ListItem ListItem] - item to add.<br /><br /> example:<br /> - cList.[#ControlList-addItem addItem]('Reboot XBMC')</tt>
; '''getItemHeight'''(...)
: <tt>[#ControlList-getItemHeight getItemHeight]() -- Returns the control's current item height as an integer.<br /><br /> example:<br /> - item_height = self.'''cList'''.[#ControlList-getItemHeight getItemHeight]()</tt>
; '''getListItem'''(...)
: <tt>[#ControlList-getListItem getListItem](index) -- Returns a given [#ListItem ListItem] in this List.<br /><br /> index : integer - index number of item to return.<br /><br /> *Note, throws a ValueError if index is out of range.<br /><br /> example:<br /> - listitem = cList.[#ControlList-getListItem getListItem](6)</tt>
; '''getSelectedItem'''(...)
: <tt>[#ControlList-getSelectedItem getSelectedItem]() -- Returns the selected item as a [#ListItem ListItem] [__builtin__.html#object object].<br /><br /> *Note, Same as [#ControlList-getSelectedPosition getSelectedPosition](), but instead of an integer a [#ListItem ListItem] [__builtin__.html#object object]<br /> is returned. Returns None for empty lists.<br /> See windowexample.py on how to use this.<br /><br /> example:<br /> - item = cList.[#ControlList-getSelectedItem getSelectedItem]()</tt>
; '''getSelectedPosition'''(...)
: <tt>[#ControlList-getSelectedPosition getSelectedPosition]() -- Returns the position of the selected item as an integer.<br /><br /> *Note, Returns -1 for empty lists.<br /><br /> example:<br /> - pos = cList.[#ControlList-getSelectedPosition getSelectedPosition]()</tt>
; '''getSpace'''(...)
: <tt>[#ControlList-getSpace getSpace]() -- Returns the control's space between items as an integer.<br /><br /> example:<br /> - gap = self.'''cList'''.[#ControlList-getSpace getSpace]()</tt>
; '''getSpinControl'''(...)
: <tt>[#ControlList-getSpinControl getSpinControl]() -- returns the associated ControlSpin [__builtin__.html#object object].<br /><br /> *Note, Not working completely yet -<br /> After adding this control list to a window it is not possible to change<br /> the settings of this spin control.<br /><br /> example:<br /> - ctl = cList.[#ControlList-getSpinControl getSpinControl]()</tt>
; '''reset'''(...)
: <tt>[#ControlList-reset reset]() -- Clear all ListItems in this control list.<br /><br /> example:<br /> - cList.[#ControlList-reset reset]()</tt>
; '''selectItem'''(...)
: <tt>[#ControlList-selectItem selectItem](item) -- Select an item by index number.<br /><br /> item : integer - index number of the item to select.<br /><br /> example:<br /> - cList.[#ControlList-selectItem selectItem](12)</tt>
; '''setImageDimensions'''(...)
: <tt>[#ControlList-setImageDimensions setImageDimensions](imageWidth, imageHeight) -- Sets the width/height of items icon or thumbnail.<br /><br /> imageWidth : [opt] integer - width of items icon or thumbnail.<br /> imageHeight : [opt] integer - height of items icon or thumbnail.<br /><br /> example:<br /> - cList.[#ControlList-setImageDimensions setImageDimensions](18, 18)</tt>
; '''setItemHeight'''(...)
: <tt>[#ControlList-setItemHeight setItemHeight](itemHeight) -- Sets the height of items.<br /><br /> itemHeight : integer - height of items.<br /><br /> example:<br /> - cList.[#ControlList-setItemHeight setItemHeight](25)</tt>
; '''setPageControlVisible'''(...)
: <tt>[#ControlList-setPageControlVisible setPageControlVisible](visible) -- Sets the spin control's visible/hidden state.<br /><br /> visible : boolean - True=visible / False=hidden.<br /><br /> example:<br /> - cList.[#ControlList-setPageControlVisible setPageControlVisible](True)</tt>
; '''setSpace'''(...)
: <tt>[#ControlList-setSpace setSpace](space) -- Set's the space between items.<br /><br /> space : [opt] integer - space between items.<br /><br /> example:<br /> - cList.[#ControlList-setSpace setSpace](5)</tt>
; '''size'''(...)
: <tt>[#ControlList-size size]() -- Returns the total number of items in this list control as an integer.<br /><br /> example:<br /> - cnt = cList.[#ControlList-size size]()</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlList-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlList-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlList-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlList-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlList-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlList-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlList-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlList-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlList-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlList-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlList-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlList-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlList-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlList-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlList-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlList-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlList-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlList-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlList-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlList-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlList-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlList-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlList-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlList-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlList-controlUp controlUp](), [#ControlList-controlDown controlDown](), [#ControlList-controlLeft controlLeft](), [#ControlList-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlList-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlList-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlList-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlList-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlList-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlList-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlProgress'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlProgress ControlProgress] class.<br /><br />[#ControlProgress ControlProgress](x, y, width, height[, texturebg, textureleft, texturemid, textureright, textureoverlay])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> texturebg : [opt] string - image filename.<br /> textureleft : [opt] string - image filename.<br /> texturemid : [opt] string - image filename.<br /> textureright : [opt] string - image filename.<br /> textureoverlay : [opt] string - image filename.<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''progress''' = xbmcgui.[#ControlProgress ControlProgress](100, 250, 125, 75)<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlProgress ControlProgress]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''getPercent'''(...)
: <tt>[#ControlProgress-getPercent getPercent]() -- Returns a float of the percent of the progress.<br /><br /> example:<br /> - print self.'''progress'''.getValue()</tt>
; '''setPercent'''(...)
: <tt>[#ControlProgress-setPercent setPercent](percent) -- Sets the percentage of the progressbar to show.<br /><br /> percent : float - percentage of the bar to show.<br /><br /> *Note, valid range for percent is 0-100<br /><br /> example:<br /> - self.'''progress'''.[#ControlProgress-setPercent setPercent](60)</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlProgress-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlProgress-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlProgress-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlProgress-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlProgress-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlProgress-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlProgress-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlProgress-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlProgress-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlProgress-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlProgress-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlProgress-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlProgress-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlProgress-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlProgress-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlProgress-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlProgress-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlProgress-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlProgress-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlProgress-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlProgress-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlProgress-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlProgress-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlProgress-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlProgress-controlUp controlUp](), [#ControlProgress-controlDown controlDown](), [#ControlProgress-controlLeft controlLeft](), [#ControlProgress-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlProgress-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlProgress-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlProgress-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlProgress-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlProgress-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlProgress-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlRadioButton'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlRadioButton ControlRadioButton] class.<br /><br />[#ControlRadioButton ControlRadioButton](x, y, width, height, label[, focusTexture, noFocusTexture, textXOffset, textYOffset,<br /> alignment, font, textColor, disabledColor, angle, shadowColor, focusedColor,<br /> radioFocusTexture, noRadioFocusTexture])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> label : string or unicode - text string.<br /> focusTexture : [opt] string - filename for focus texture.<br /> noFocusTexture : [opt] string - filename for no focus texture.<br /> textXOffset : [opt] integer - x offset of label.<br /> textYOffset : [opt] integer - y offset of label.<br /> alignment : [opt] integer - alignment of label - *Note, see xbfont.h<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled radio button's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled radio button's label. (e.g. '0xFFFF3300')<br /> angle : [opt] integer - angle of control. (+ rotates CCW, - rotates CW)<br /> shadowColor : [opt] hexstring - color of radio button's label's shadow. (e.g. '0xFF000000')<br /> focusedColor : [opt] hexstring - color of focused radio button's label. (e.g. '0xFF00FFFF')<br /> radioFocusTexture : [opt] string - filename for radio focus texture.<br /> noRadioFocusTexture : [opt] string - filename for radio no focus texture.<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''radiobutton''' = xbmcgui.[#ControlRadioButton ControlRadioButton](100, 250, 200, 50, 'Status', font='font14')<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlRadioButton ControlRadioButton]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''isSelected'''(...)
: <tt>[#ControlRadioButton-isSelected isSelected]() -- Returns the radio buttons's selected status.<br /><br /> example:<br /> - is = self.'''radiobutton'''.[#ControlRadioButton-isSelected isSelected]()</tt>
; '''setLabel'''(...)
: <tt>[#ControlRadioButton-setLabel setLabel](label[, font, textColor, disabledColor, shadowColor, focusedColor]) -- Set's the radio buttons text attributes.<br /><br /> label : string or unicode - text string.<br /> font : [opt] string - font used for label text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of enabled radio button's label. (e.g. '0xFFFFFFFF')<br /> disabledColor : [opt] hexstring - color of disabled radio button's label. (e.g. '0xFFFF3300')<br /> shadowColor : [opt] hexstring - color of radio button's label's shadow. (e.g. '0xFF000000')<br /> focusedColor : [opt] hexstring - color of focused radio button's label. (e.g. '0xFFFFFF00')<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''radiobutton'''.[#ControlRadioButton-setLabel setLabel]('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300', '0xFF000000')</tt>
; '''setRadioDimension'''(...)
: <tt>[#ControlRadioButton-setRadioDimension setRadioDimension](x, y, width, height) -- Sets the radio buttons's radio texture's position and size.<br /><br /> x : integer - x coordinate of radio texture.<br /> y : integer - y coordinate of radio texture.<br /> width : integer - width of radio texture.<br /> height : integer - height of radio texture.<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''radiobutton'''.[#ControlRadioButton-setRadioDimension setRadioDimension](x=100, y=5, width=20, height=20)</tt>
; '''setSelected'''(...)
: <tt>[#ControlRadioButton-setSelected setSelected](selected) -- Sets the radio buttons's selected status.<br /><br /> selected : bool - True=selected (on) / False=not selected (off)<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''radiobutton'''.[#ControlRadioButton-setSelected setSelected](True)</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlRadioButton-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlRadioButton-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlRadioButton-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlRadioButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlRadioButton-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlRadioButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlRadioButton-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlRadioButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlRadioButton-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlRadioButton-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlRadioButton-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlRadioButton-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlRadioButton-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlRadioButton-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlRadioButton-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlRadioButton-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlRadioButton-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlRadioButton-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlRadioButton-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlRadioButton-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlRadioButton-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlRadioButton-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlRadioButton-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlRadioButton-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlRadioButton-controlUp controlUp](), [#ControlRadioButton-controlDown controlDown](), [#ControlRadioButton-controlLeft controlLeft](), [#ControlRadioButton-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlRadioButton-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlRadioButton-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlRadioButton-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlRadioButton-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlRadioButton-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlRadioButton-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ControlTextBox'''(Control)</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ControlTextBox ControlTextBox] class.<br /><br />[#ControlTextBox ControlTextBox](x, y, width, height[, font, textColor])<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /> width : integer - width of control.<br /> height : integer - height of control.<br /> font : [opt] string - font used for text. (e.g. 'font13')<br /> textColor : [opt] hexstring - color of textbox's text. (e.g. '0xFFFFFFFF')<br /><br /> *Note, You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /> After you create the control, you need to add it to the window with addControl().<br /><br /> example:<br /> - self.'''textbox''' = xbmcgui.[#ControlTextBox ControlTextBox](100, 250, 300, 300, textColor='0xFFFFFFFF')<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#ControlTextBox ControlTextBox]
: Control
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''getSpinControl'''(...)
: <tt>[#ControlTextBox-getSpinControl getSpinControl]() -- Returns the associated ControlSpin.<br /> - Not working completely yet -<br /> After adding this textbox to a window it is not possible to change<br /> the settings of this spin control.<br /> example:<br /> - id = self.'''textbox'''.[#ControlTextBox-getSpinControl getSpinControl]()</tt>
; '''reset'''(...)
: <tt>[#ControlTextBox-reset reset]() -- Clear's this textbox.<br /><br /> example:<br /> - self.'''textbox'''.[#ControlTextBox-reset reset]()</tt>
; '''setText'''(...)
: <tt>[#ControlTextBox-setText setText](text) -- Set's the text for this textbox.<br /><br /> text : string or unicode - text string.<br /><br /> example:<br /> - self.'''textbox'''.[#ControlTextBox-setText setText]('This is a line of text that can wrap.')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ControlTextBox-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from Control:<br />
; '''__cmp__'''(...)
: <tt>x.[#ControlTextBox-__cmp__ __cmp__](y) <==> cmp(x,y)</tt>
; '''controlDown'''(...)
: <tt>[#ControlTextBox-controlDown controlDown](control) -- Set's the controls down navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on down.<br /><br /> *Note, You can also use [#ControlTextBox-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-controlDown controlDown](self.'''button1''')</tt>
; '''controlLeft'''(...)
: <tt>[#ControlTextBox-controlLeft controlLeft](control) -- Set's the controls left navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on left.<br /><br /> *Note, You can also use [#ControlTextBox-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-controlLeft controlLeft](self.'''button1''')</tt>
; '''controlRight'''(...)
: <tt>[#ControlTextBox-controlRight controlRight](control) -- Set's the controls right navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, You can also use [#ControlTextBox-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-controlRight controlRight](self.'''button1''')</tt>
; '''controlUp'''(...)
: <tt>[#ControlTextBox-controlUp controlUp](control) -- Set's the controls up navigation.<br /><br /> control : control [__builtin__.html#object object] - control to navigate to on up.<br /><br /> *Note, You can also use [#ControlTextBox-setNavigation setNavigation](). Set to self to disable navigation.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-controlUp controlUp](self.'''button1''')</tt>
; '''getHeight'''(...)
: <tt>[#ControlTextBox-getHeight getHeight]() -- Returns the control's current height as an integer.<br /><br /> example:<br /> - height = self.'''button'''.[#ControlTextBox-getHeight getHeight]()</tt>
; '''getId'''(...)
: <tt>[#ControlTextBox-getId getId]() -- Returns the control's current id as an integer.<br /><br /> example:<br /> - id = self.'''button'''.[#ControlTextBox-getId getId]()</tt>
; '''getPosition'''(...)
: <tt>[#ControlTextBox-getPosition getPosition]() -- Returns the control's current position as a x,y integer tuple.<br /><br /> example:<br /> - pos = self.'''button'''.[#ControlTextBox-getPosition getPosition]()</tt>
; '''getWidth'''(...)
: <tt>[#ControlTextBox-getWidth getWidth]() -- Returns the control's current width as an integer.<br /><br /> example:<br /> - width = self.'''button'''.[#ControlTextBox-getWidth getWidth]()</tt>
; '''setAnimations'''(...)
: <tt>[#ControlTextBox-setAnimations setAnimations]([(event, attr,)*]) -- Set's the control's animations.<br /><br /> [(event,attr,)*] : list - A list of tuples consisting of event and attributes pairs.<br /> - event : string - The event to animate.<br /> - attr : string - The whole attribute string separated by spaces.<br /><br /> Animating your skin - http://xbmc.org/wiki/?title=Animating_Your_Skin<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setAnimations setAnimations]([('focus', 'effect=zoom end=90,247,220,56 time=0',)])</tt>
; '''setEnableCondition'''(...)
: <tt>[#ControlTextBox-setEnableCondition setEnableCondition](enable) -- Set's the control's enabled condition.<br /> Allows XBMC to control the enabled status of the control.<br /><br /> enable : string - Enable condition.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setEnableCondition setEnableCondition]('System.InternetState')</tt>
; '''setEnabled'''(...)
: <tt>[#ControlTextBox-setEnabled setEnabled](enabled) -- Set's the control's enabled/disabled state.<br /><br /> enabled : bool - True=enabled / False=disabled.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setEnabled setEnabled](False)</tt>
; '''setHeight'''(...)
: <tt>[#ControlTextBox-setHeight setHeight](height) -- Set's the controls height.<br /><br /> height : integer - height of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlTextBox-setHeight setHeight](100)</tt>
; '''setNavigation'''(...)
: <tt>[#ControlTextBox-setNavigation setNavigation](up, down, left, right) -- Set's the controls navigation.<br /><br /> up : control [__builtin__.html#object object] - control to navigate to on up.<br /> down : control [__builtin__.html#object object] - control to navigate to on down.<br /> left : control [__builtin__.html#object object] - control to navigate to on left.<br /> right : control [__builtin__.html#object object] - control to navigate to on right.<br /><br /> *Note, Same as [#ControlTextBox-controlUp controlUp](), [#ControlTextBox-controlDown controlDown](), [#ControlTextBox-controlLeft controlLeft](), [#ControlTextBox-controlRight controlRight]().<br /> Set to self to disable navigation for that direction.<br /><br /> Throws: TypeError, if one of the supplied arguments is not a control type.<br /> ReferenceError, if one of the controls is not added to a window.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setNavigation setNavigation](self.'''button1''', self.'''button2''', self.'''button3''', self.'''button4''')</tt>
; '''setPosition'''(...)
: <tt>[#ControlTextBox-setPosition setPosition](x, y) -- Set's the controls position.<br /><br /> x : integer - x coordinate of control.<br /> y : integer - y coordinate of control.<br /><br /> *Note, You may use negative integers. (e.g sliding a control into view)<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setPosition setPosition](100, 250)</tt>
; '''setVisible'''(...)
: <tt>[#ControlTextBox-setVisible setVisible](visible) -- Set's the control's visible/hidden state.<br /><br /> visible : bool - True=visible / False=hidden.<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setVisible setVisible](False)</tt>
; '''setVisibleCondition'''(...)
: <tt>[#ControlTextBox-setVisibleCondition setVisibleCondition](visible[,allowHiddenFocus]) -- Set's the control's visible condition.<br /> Allows XBMC to control the visible status of the control.<br /><br /> visible : string - Visible condition.<br /> allowHiddenFocus : bool - True=gains focus even if hidden.<br /><br /> List of Conditions - http://xbmc.org/wiki/index.php?title=List_of_Boolean_Conditions<br /><br /> example:<br /> - self.'''button'''.[#ControlTextBox-setVisibleCondition setVisibleCondition]('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)</tt>
; '''setWidth'''(...)
: <tt>[#ControlTextBox-setWidth setWidth](width) -- Set's the controls width.<br /><br /> width : integer - width of control.<br /><br /> example:<br /> - self.'''image'''.[#ControlTextBox-setWidth setWidth](100)</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''Dialog'''([__builtin__.html#object __builtin__.object])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#Dialog Dialog] class.<br /></tt>
|-
| width="100%" |
Methods defined here:<br />
; '''browse'''(...)
: <tt>[#Dialog-browse browse](type, heading, shares[, mask, useThumbs, treatAsFolder, default]) -- Show a 'Browse' dialog.<br /><br /> type : integer - the type of browse dialog.<br /> heading : string or unicode - dialog heading.<br /> shares : string or unicode - from sources.xml. (i.e. 'myprograms')<br /> mask : [opt] string or unicode - '|' separated file mask. (i.e. '.jpg|.png')<br /> useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist.<br /> treatAsFolder : [opt] boolean - if True playlists and archives act as folders.<br /> default : [opt] string - default path or file.<br /><br /> Types:<br /> 0 : ShowAndGetDirectory<br /> 1 : ShowAndGetFile<br /> 2 : ShowAndGetImage<br /> 3 : ShowAndGetWriteableDirectory<br /><br /> *Note, Returns filename and/or path as a string to the location of the highlighted item,<br /> if user pressed 'Ok' or a masked item was selected.<br /> Returns the default value if dialog was canceled.<br /><br /> example:<br /> - dialog = xbmcgui.[#Dialog Dialog]()<br /> - fn = dialog.[#Dialog-browse browse]<nowiki>(3, 'XBMC', 'files', '', False, False, 'T:\script_data\XBMC Lyrics')</nowiki></tt>
; '''numeric'''(...)
: <tt>[#Dialog-numeric numeric](type, heading[, default]) -- Show a 'Numeric' dialog.<br /><br /> type : integer - the type of numeric dialog.<br /> heading : string or unicode - dialog heading.<br /> default : [opt] string - default value.<br /><br /> Types:<br /> 0 : ShowAndGetNumber (default format: #)<br /> 1 : ShowAndGetDate (default format: DD/MM/YYYY)<br /> 2 : ShowAndGetTime (default format: HH:MM)<br /> 3 : ShowAndGetIPAddress (default format: #.#.#.#)<br /><br /> *Note, Returns the entered data as a string.<br /> Returns the default value if dialog was canceled.<br /><br /> example:<br /> - dialog = xbmcgui.[#Dialog Dialog]()<br /> - d = dialog.[#Dialog-numeric numeric](1, 'Enter date of birth')</tt>
; '''ok'''(...)
: <tt>[#Dialog-ok ok](heading, line1[, line2, line3]) -- Show a dialog 'OK'.<br /><br /> heading : string or unicode - dialog heading.<br /> line1 : string or unicode - line #1 text.<br /> line2 : [opt] string or unicode - line #2 text.<br /> line3 : [opt] string or unicode - line #3 text.<br /><br /> *Note, Returns True if 'Ok' was pressed, else False.<br /><br /> example:<br /> - dialog = xbmcgui.[#Dialog Dialog]()<br /> - ok = dialog.[#Dialog-ok ok]('XBMC', 'There was an error.')</tt>
; '''select'''(...)
: <tt>[#Dialog-select select](heading, list) -- Show a select dialog.<br /><br /> heading : string or unicode - dialog heading.<br /> list : string list - list of items.<br /><br /> *Note, Returns the position of the highlighted item as an integer.<br /><br /> example:<br /> - dialog = xbmcgui.[#Dialog Dialog]()<br /> - ret = dialog.[#Dialog-select select]('Choose a playlist', ['Playlist #1', 'Playlist #2, 'Playlist #3'])</tt>
; '''yesno'''(...)
: <tt>[#Dialog-yesno yesno](heading, line1[, line2, line3]) -- Show a dialog 'YES/NO'.<br /><br /> heading : string or unicode - dialog heading.<br /> line1 : string or unicode - line #1 text.<br /> line2 : [opt] string or unicode - line #2 text.<br /> line3 : [opt] string or unicode - line #3 text.<br /> nolabel : [opt] label to put on the no button.<br /> yeslabel : [opt] label to put on the yes button.<br /><br /> *Note, Returns True if 'Yes' was pressed, else False.<br /><br /> example:<br /> - dialog = xbmcgui.[#Dialog Dialog]()<br /> - ret = dialog.[#Dialog-yesno yesno]('XBMC', 'Do you want to exit this script?')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#Dialog-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''DialogProgress'''([__builtin__.html#object __builtin__.object])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#DialogProgress DialogProgress] class.<br /></tt>
|-
| width="100%" |
Methods defined here:<br />
; '''close'''(...)
: <tt>[#DialogProgress-close close]() -- Close the progress dialog.<br /><br /> example:<br /> - pDialog.[#DialogProgress-close close]()</tt>
; '''create'''(...)
: <tt>[#DialogProgress-create create](heading[, line1, line2, line3]) -- Create and show a progress dialog.<br /><br /> heading : string or unicode - dialog heading.<br /> line1 : string or unicode - line #1 text.<br /> line2 : [opt] string or unicode - line #2 text.<br /> line3 : [opt] string or unicode - line #3 text.<br /><br /> *Note, Use [#DialogProgress-update update]() to update lines and progressbar.<br /><br /> example:<br /> - pDialog = xbmcgui.[#DialogProgress DialogProgress]()<br /> - ret = pDialog.[#DialogProgress-create create]('XBMC', 'Initializing script...')</tt>
; '''iscanceled'''(...)
: <tt>[#DialogProgress-iscanceled iscanceled]() -- Returns True if the user pressed cancel.<br /><br /> example:<br /> - if (pDialog.[#DialogProgress-iscanceled iscanceled]()): return</tt>
; '''update'''(...)
: <tt>[#DialogProgress-update update](percent[, line1, line2, line3]) -- Update's the progress dialog.<br /><br /> percent : integer - percent complete. (0:100)<br /> line1 : [opt] string or unicode - line #1 text.<br /> line2 : [opt] string or unicode - line #2 text.<br /> line3 : [opt] string or unicode - line #3 text.<br /><br /> *Note, If percent == 0, the progressbar will be hidden.<br /><br /> example:<br /> - pDialog.[#DialogProgress-update update](25, 'Importing modules...')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#DialogProgress-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''ListItem'''([__builtin__.html#object __builtin__.object])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#ListItem ListItem] class.<br /><br />[#ListItem ListItem]([label, label2, iconImage, thumbnailImage]) -- Creates a new [#ListItem ListItem].<br /><br /> label : [opt] string or unicode - label1 text.<br /> label2 : [opt] string or unicode - label2 text.<br /> iconImage : [opt] string - icon filename.<br /> thumbnailImage : [opt] string - thumbnail filename.<br /><br /> example:<br /> - listitem = xbmcgui.[#ListItem ListItem]('Casino Royale', '[PG-13]', 'blank-poster.tbn', 'poster.tbn')<br /></tt>
|-
| width="100%" |
Methods defined here:<br />
; '''addContextMenuItems'''(...)
: <tt>[#ListItem-addContextMenuItems addContextMenuItems]([(label, action,)*]) -- Adds item(s) to the context menu for media lists.<br /><br /> [(label, action,)*] : list - A list of tuples consisting of label and action pairs.<br /> - label : string or unicode - item's label.<br /> - action : string - any built-in function to perform.<br /><br /> List of functions - http://xbmc.org/wiki/?title=List_of_Built_In_Functions<br /><br /> example:<br /> - listitem.[#ListItem-addContextMenuItems addContextMenuItems]([('Theater Showtimes', 'XBMC.RunScript(q:\\scripts\\showtimes\\default.py,Iron Man)',)])</tt>
; '''getLabel'''(...)
: <tt>[#ListItem-getLabel getLabel]() -- Returns the listitem label.<br /><br /> example:<br /> - label = self.'''list'''.getSelectedItem().[#ListItem-getLabel getLabel]()</tt>
; '''getLabel2'''(...)
: <tt>[#ListItem-getLabel2 getLabel2]() -- Returns the listitem's second label.<br /><br /> example:<br /> - label2 = self.'''list'''.getSelectedItem().[#ListItem-getLabel2 getLabel2]()</tt>
; '''getProperty'''(...)
: <tt>[#ListItem-getProperty getProperty](key) -- Returns a listitem property as a string, similar to an infolabel.<br /><br /> key : string - property name.<br /><br /> *Note, Key is NOT case sensitive.<br /> You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - AspectRatio = self.'''list'''.getSelectedItem().[#ListItem-getProperty getProperty]('AspectRatio')</tt>
; '''isSelected'''(...)
: <tt>[#ListItem-isSelected isSelected]() -- Returns the listitem's selected status.<br /><br /> example:<br /> - is = self.'''list'''.getSelectedItem().[#ListItem-isSelected isSelected]()</tt>
; '''select'''(...)
: <tt>[#ListItem-select select](selected) -- Sets the listitem's selected status.<br /><br /> selected : bool - True=selected/False=not selected<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-select select](True)</tt>
; '''setIconImage'''(...)
: <tt>[#ListItem-setIconImage setIconImage](icon) -- Sets the listitem's icon image.<br /><br /> icon : string - image filename.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setIconImage setIconImage]('emailread.png')</tt>
; '''setInfo'''(...)
: <tt>[#ListItem-setInfo setInfo](type, infoLabels) -- Sets the listitem's infoLabels.<br /><br /> type : string - type of media(video/music/pictures).<br /> infoLabels : dictionary - pairs of { label: value }.<br /><br /> *Note, To set pictures exif info, prepend 'exif:' to the label. Exif values must be passed<br /> as strings, separate value pairs with a comma. (eg. {'exif:resolution': '720,480'}<br /> See CPictureInfoTag::TranslateString in PictureInfoTag.cpp for valid strings.<br /><br /> You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setInfo setInfo]('video', { 'Genre': 'Comedy' })</tt>
; '''setLabel'''(...)
: <tt>[#ListItem-setLabel setLabel](label) -- Sets the listitem's label.<br /><br /> label : string or unicode - text string.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setLabel setLabel]('Casino Royale')</tt>
; '''setLabel2'''(...)
: <tt>[#ListItem-setLabel2 setLabel2](label2) -- Sets the listitem's second label.<br /><br /> label2 : string or unicode - text string.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setLabel2 setLabel2]('[pg-13]')</tt>
; '''setProperty'''(...)
: <tt>[#ListItem-setProperty setProperty](key, value) -- Sets a listitem property, similar to an infolabel.<br /><br /> key : string - property name.<br /> value : string or unicode - value of property.<br /><br /> *Note, Key is NOT case sensitive.<br /> You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setProperty setProperty]('AspectRatio', '1.85 : 1')</tt>
; '''setThumbnailImage'''(...)
: <tt>[#ListItem-setThumbnailImage setThumbnailImage](thumb) -- Sets the listitem's thumbnail image.<br /><br /> thumb : string - image filename.<br /><br /> example:<br /> - self.'''list'''.getSelectedItem().[#ListItem-setThumbnailImage setThumbnailImage]('emailread.png')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#ListItem-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''Window'''([__builtin__.html#object __builtin__.object])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#Window Window] class.<br /><br />[#Window Window](self[, int windowId) -- Create a new [#Window Window] to draw on.<br /> Specify an id to use an existing window.<br /><br /> Throws: ValueError, if supplied window Id does not exist.<br /> Exception, if more then 200 windows are created.<br /><br /> Deleting this window will activate the old window that was active<br /> and resets (not delete) all controls that are associated with this window.<br /></tt>
|-
| width="100%" |
Methods defined here:<br />
; '''addControl'''(...)
: <tt>[#Window-addControl addControl](self, Control) -- Add a Control to this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> ReferenceError, if control is already used in another window<br /> RuntimeError, should not happen :-)<br /><br /> The next controls can be added to a window atm<br /><br /> -[#ControlLabel ControlLabel]<br /> -[#ControlFadeLabel ControlFadeLabel]<br /> -[#ControlTextBox ControlTextBox]<br /> -[#ControlButton ControlButton]<br /> -[#ControlCheckMark ControlCheckMark]<br /> -[#ControlList ControlList]<br /> -[#ControlGroup ControlGroup]<br /> -[#ControlImage ControlImage]<br /> -[#ControlRadioButton ControlRadioButton]<br /> -[#ControlProgress ControlProgress]</tt>
; '''close'''(...)
: <tt>[#Window-close close](self) -- Closes this window.<br /><br /> Closes this window by activating the old window.<br /> The window is not deleted with this method.</tt>
; '''doModal'''(...)
: <tt>[#Window-doModal doModal](self) -- Display this window until [#Window-close close]() is called.</tt>
; '''getControl'''(...)
: <tt>[#Window-getControl getControl](self, int controlId) -- Get's the control from this window.<br /><br /> Throws: Exception, if Control doesn't exist<br /><br /> controlId doesn't have to be a python control, it can be a control id<br /> from a xbmc window too (you can find id's in the xml files<br /><br /> Note, not python controls are not completely usable yet<br /> You can only use the Control functions</tt>
; '''getFocus'''(...)
: <tt>[#Window-getFocus getFocus](self, Control) -- returns the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getFocusId'''(...)
: <tt>[#Window-getFocusId getFocusId](self, int) -- returns the id of the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getHeight'''(...)
: <tt>[#Window-getHeight getHeight](self) -- Returns the height of this screen.</tt>
; '''getResolution'''(...)
: <tt>[#Window-getResolution getResolution](self) -- Returns the resolution of the screen. The returned value is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''getWidth'''(...)
: <tt>[#Window-getWidth getWidth](self) -- Returns the width of this screen.</tt>
; '''onAction'''(...)
: <tt>[#Window-onAction onAction](self, [#Action Action] action) -- onAction method.<br /><br /> This method will recieve all actions that the main program will send<br /> to this window.<br /> By default, only the PREVIOUS_MENU action is handled.<br /> Overwrite this method to let your script handle all actions.<br /> Don't forget to capture ACTION_PREVIOUS_MENU, else the user can't close this window.</tt>
; '''removeControl'''(...)
: <tt>[#Window-removeControl removeControl](self, Control) -- Removes the control from this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> RuntimeError, if control is not added to this window<br /><br /> This will not delete the control. It is only removed from the window.</tt>
; '''setCoordinateResolution'''(...)
: <tt>[#Window-setCoordinateResolution setCoordinateResolution](self, int resolution) -- Sets the resolution<br /> that the coordinates of all controls are defined in. Allows XBMC<br /> to scale control positions and width/heights to whatever resolution<br /> XBMC is currently using.<br /> resolution is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''setFocus'''(...)
: <tt>[#Window-setFocus setFocus](self, Control) -- Give the supplied control focus.<br /> Throws: TypeError, if supplied argument is not a Control type<br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''setFocusId'''(...)
: <tt>[#Window-setFocusId setFocusId](self, int) -- Gives the control with the supplied focus.<br /> Throws: <br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''show'''(...)
: <tt>[#Window-show show](self) -- Show this window.<br /><br /> Shows this window by activating it, calling [#Window-close close]() after it wil activate the<br /> current window again.<br /> Note, if your script ends this window will be closed to. To show it forever, <br /> make a loop at the end of your script ar use [#Window-doModal doModal]() instead</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#Window-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''WindowDialog'''([xbmcgui.html#Window Window])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#WindowDialog WindowDialog] class.<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#WindowDialog WindowDialog]
: [xbmcgui.html#Window Window]
: [__builtin__.html#object __builtin__.object]
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#WindowDialog-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from [xbmcgui.html#Window Window]<nowiki>:</nowiki><br />
; '''addControl'''(...)
: <tt>[#WindowDialog-addControl addControl](self, Control) -- Add a Control to this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> ReferenceError, if control is already used in another window<br /> RuntimeError, should not happen :-)<br /><br /> The next controls can be added to a window atm<br /><br /> -[#ControlLabel ControlLabel]<br /> -[#ControlFadeLabel ControlFadeLabel]<br /> -[#ControlTextBox ControlTextBox]<br /> -[#ControlButton ControlButton]<br /> -[#ControlCheckMark ControlCheckMark]<br /> -[#ControlList ControlList]<br /> -[#ControlGroup ControlGroup]<br /> -[#ControlImage ControlImage]<br /> -[#ControlRadioButton ControlRadioButton]<br /> -[#ControlProgress ControlProgress]</tt>
; '''close'''(...)
: <tt>[#WindowDialog-close close](self) -- Closes this window.<br /><br /> Closes this window by activating the old window.<br /> The window is not deleted with this method.</tt>
; '''doModal'''(...)
: <tt>[#WindowDialog-doModal doModal](self) -- Display this window until [#WindowDialog-close close]() is called.</tt>
; '''getControl'''(...)
: <tt>[#WindowDialog-getControl getControl](self, int controlId) -- Get's the control from this window.<br /><br /> Throws: Exception, if Control doesn't exist<br /><br /> controlId doesn't have to be a python control, it can be a control id<br /> from a xbmc window too (you can find id's in the xml files<br /><br /> Note, not python controls are not completely usable yet<br /> You can only use the Control functions</tt>
; '''getFocus'''(...)
: <tt>[#WindowDialog-getFocus getFocus](self, Control) -- returns the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getFocusId'''(...)
: <tt>[#WindowDialog-getFocusId getFocusId](self, int) -- returns the id of the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getHeight'''(...)
: <tt>[#WindowDialog-getHeight getHeight](self) -- Returns the height of this screen.</tt>
; '''getResolution'''(...)
: <tt>[#WindowDialog-getResolution getResolution](self) -- Returns the resolution of the screen. The returned value is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''getWidth'''(...)
: <tt>[#WindowDialog-getWidth getWidth](self) -- Returns the width of this screen.</tt>
; '''onAction'''(...)
: <tt>[#WindowDialog-onAction onAction](self, [#Action Action] action) -- onAction method.<br /><br /> This method will recieve all actions that the main program will send<br /> to this window.<br /> By default, only the PREVIOUS_MENU action is handled.<br /> Overwrite this method to let your script handle all actions.<br /> Don't forget to capture ACTION_PREVIOUS_MENU, else the user can't close this window.</tt>
; '''removeControl'''(...)
: <tt>[#WindowDialog-removeControl removeControl](self, Control) -- Removes the control from this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> RuntimeError, if control is not added to this window<br /><br /> This will not delete the control. It is only removed from the window.</tt>
; '''setCoordinateResolution'''(...)
: <tt>[#WindowDialog-setCoordinateResolution setCoordinateResolution](self, int resolution) -- Sets the resolution<br /> that the coordinates of all controls are defined in. Allows XBMC<br /> to scale control positions and width/heights to whatever resolution<br /> XBMC is currently using.<br /> resolution is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''setFocus'''(...)
: <tt>[#WindowDialog-setFocus setFocus](self, Control) -- Give the supplied control focus.<br /> Throws: TypeError, if supplied argument is not a Control type<br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''setFocusId'''(...)
: <tt>[#WindowDialog-setFocusId setFocusId](self, int) -- Gives the control with the supplied focus.<br /> Throws: <br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''show'''(...)
: <tt>[#WindowDialog-show show](self) -- Show this window.<br /><br /> Shows this window by activating it, calling [#WindowDialog-close close]() after it wil activate the<br /> current window again.<br /> Note, if your script ends this window will be closed to. To show it forever, <br /> make a loop at the end of your script ar use [#WindowDialog-doModal doModal]() instead</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''WindowXML'''([xbmcgui.html#Window Window])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#WindowXML WindowXML] class.<br /><br />[#WindowXML WindowXML](self, xmlFilename, scriptPath[, defaultSkin, forceFallback) -- Create a new [#WindowXML WindowXML] script.<br /><br /> xmlFilename : string - the name of the xml file to look for.<br /> scriptPath : string - path to script. used to fallback to if the xml doesn't exist in the current skin. (eg os.getcwd())<br /> defaultSkin : [opt] string - name of the folder in the skins path to look in for the xml. (default='Default')<br /> forceFallback : [opt] boolean - if true then it will look only in the defaultSkin folder. (default=False)<br /><br /> *Note, skin folder structure is eg(resources/skins/Default/PAL)<br /><br /> example:<br /> - ui = GUI('script-AMT-main.xml', os.getcwd(), 'LCARS', True)<br /> ui.[#WindowXML-doModal doModal]()<br /> del ui<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#WindowXML WindowXML]
: [xbmcgui.html#Window Window]
: [__builtin__.html#object __builtin__.object]
----
 Methods defined here:<br />
; '''addItem'''(...)
: <tt>[#WindowXML-addItem addItem](item[, position]) -- Add a new item to this [#Window Window] List.<br /><br /> item : string, unicode or [#ListItem ListItem] - item to add.<br /> position : [opt] integer - position of item to add. (NO Int = Adds to bottom,0 adds to top, 1 adds to one below from top,-1 adds to one above from bottom etc etc )<br /> - If integer positions are greater than list size, negative positions will add to top of list, positive positions will add to bottom of list<br /> example:<br /> - [#WindowXML-addItem addItem]('Reboot XBMC', 0)</tt>
; '''clearList'''(...)
: <tt>[#WindowXML-clearList clearList]() -- Clear the [#Window Window] List.<br /><br /> example:<br /> - [#WindowXML-clearList clearList]()</tt>
; '''getCurrentListPosition'''(...)
: <tt>[#WindowXML-getCurrentListPosition getCurrentListPosition]() -- Gets the current position in the [#Window Window] List.<br /><br /> example:<br /> - pos = [#WindowXML-getCurrentListPosition getCurrentListPosition]()</tt>
; '''getListItem'''(...)
: <tt>[#WindowXML-getListItem getListItem](position) -- Returns a given [#ListItem ListItem] in this [#Window Window] List.<br /><br /> position : integer - position of item to return.<br /><br /> example:<br /> - listitem = [#WindowXML-getListItem getListItem](6)</tt>
; '''getListSize'''(...)
: <tt>[#WindowXML-getListSize getListSize]() -- Returns the number of items in this [#Window Window] List.<br /><br /> example:<br /> - listSize = [#WindowXML-getListSize getListSize]()</tt>
; '''removeItem'''(...)
: <tt>[#WindowXML-removeItem removeItem](position) -- Removes a specified item based on position, from the [#Window Window] List.<br /><br /> position : integer - position of item to remove.<br /><br /> example:<br /> - [#WindowXML-removeItem removeItem](5)</tt>
; '''setCurrentListPosition'''(...)
: <tt>[#WindowXML-setCurrentListPosition setCurrentListPosition](position) -- Set the current position in the [#Window Window] List.<br /><br /> position : integer - position of item to set.<br /><br /> example:<br /> - [#WindowXML-setCurrentListPosition setCurrentListPosition](5)</tt>
; '''setProperty'''(...)
: <tt>[#WindowXML-setProperty setProperty](key, value) -- Sets a container property, similar to an infolabel.<br /><br /> key : string - property name.<br /> value : string or unicode - value of property.<br /><br /> *Note, Key is NOT case sensitive.<br /> You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - [#WindowXML-setProperty setProperty]('Category', 'Newest')</tt>
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#WindowXML-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from [xbmcgui.html#Window Window]<nowiki>:</nowiki><br />
; '''addControl'''(...)
: <tt>[#WindowXML-addControl addControl](self, Control) -- Add a Control to this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> ReferenceError, if control is already used in another window<br /> RuntimeError, should not happen :-)<br /><br /> The next controls can be added to a window atm<br /><br /> -[#ControlLabel ControlLabel]<br /> -[#ControlFadeLabel ControlFadeLabel]<br /> -[#ControlTextBox ControlTextBox]<br /> -[#ControlButton ControlButton]<br /> -[#ControlCheckMark ControlCheckMark]<br /> -[#ControlList ControlList]<br /> -[#ControlGroup ControlGroup]<br /> -[#ControlImage ControlImage]<br /> -[#ControlRadioButton ControlRadioButton]<br /> -[#ControlProgress ControlProgress]</tt>
; '''close'''(...)
: <tt>[#WindowXML-close close](self) -- Closes this window.<br /><br /> Closes this window by activating the old window.<br /> The window is not deleted with this method.</tt>
; '''doModal'''(...)
: <tt>[#WindowXML-doModal doModal](self) -- Display this window until [#WindowXML-close close]() is called.</tt>
; '''getControl'''(...)
: <tt>[#WindowXML-getControl getControl](self, int controlId) -- Get's the control from this window.<br /><br /> Throws: Exception, if Control doesn't exist<br /><br /> controlId doesn't have to be a python control, it can be a control id<br /> from a xbmc window too (you can find id's in the xml files<br /><br /> Note, not python controls are not completely usable yet<br /> You can only use the Control functions</tt>
; '''getFocus'''(...)
: <tt>[#WindowXML-getFocus getFocus](self, Control) -- returns the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getFocusId'''(...)
: <tt>[#WindowXML-getFocusId getFocusId](self, int) -- returns the id of the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getHeight'''(...)
: <tt>[#WindowXML-getHeight getHeight](self) -- Returns the height of this screen.</tt>
; '''getResolution'''(...)
: <tt>[#WindowXML-getResolution getResolution](self) -- Returns the resolution of the screen. The returned value is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''getWidth'''(...)
: <tt>[#WindowXML-getWidth getWidth](self) -- Returns the width of this screen.</tt>
; '''onAction'''(...)
: <tt>[#WindowXML-onAction onAction](self, [#Action Action] action) -- onAction method.<br /><br /> This method will recieve all actions that the main program will send<br /> to this window.<br /> By default, only the PREVIOUS_MENU action is handled.<br /> Overwrite this method to let your script handle all actions.<br /> Don't forget to capture ACTION_PREVIOUS_MENU, else the user can't close this window.</tt>
; '''removeControl'''(...)
: <tt>[#WindowXML-removeControl removeControl](self, Control) -- Removes the control from this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> RuntimeError, if control is not added to this window<br /><br /> This will not delete the control. It is only removed from the window.</tt>
; '''setCoordinateResolution'''(...)
: <tt>[#WindowXML-setCoordinateResolution setCoordinateResolution](self, int resolution) -- Sets the resolution<br /> that the coordinates of all controls are defined in. Allows XBMC<br /> to scale control positions and width/heights to whatever resolution<br /> XBMC is currently using.<br /> resolution is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''setFocus'''(...)
: <tt>[#WindowXML-setFocus setFocus](self, Control) -- Give the supplied control focus.<br /> Throws: TypeError, if supplied argument is not a Control type<br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''setFocusId'''(...)
: <tt>[#WindowXML-setFocusId setFocusId](self, int) -- Gives the control with the supplied focus.<br /> Throws: <br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''show'''(...)
: <tt>[#WindowXML-show show](self) -- Show this window.<br /><br /> Shows this window by activating it, calling [#WindowXML-close close]() after it wil activate the<br /> current window again.<br /> Note, if your script ends this window will be closed to. To show it forever, <br /> make a loop at the end of your script ar use [#WindowXML-doModal doModal]() instead</tt>
|}{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#ffc8d8"
| colspan="3" valign="bottom" | <br /><font color="#000000" face="helvetica, arial">class '''WindowXMLDialog'''([xbmcgui.html#WindowXML WindowXML])</font>
|- bgcolor="#ffc8d8"
| rowspan="2" |
| colspan="2" | <tt>[#WindowXMLDialog WindowXMLDialog] class.<br /><br />[#WindowXMLDialog WindowXMLDialog](self, xmlFilename, scriptPath[, defaultSkin, forceFallback) -- Create a new [#WindowXMLDialog WindowXMLDialog] script.<br /><br /> xmlFilename : string - the name of the xml file to look for.<br /> scriptPath : string - path to script. used to fallback to if the xml doesn't exist in the current skin. (eg os.getcwd())<br /> defaultSkin : [opt] string - name of the folder in the skins path to look in for the xml. (default='Default')<br /> forceFallback : [opt] boolean - if true then it will look only in the defaultSkin folder. (default=False)<br /><br /> *Note, skin folder structure is eg(resources/skins/Default/PAL)<br /><br /> example:<br /> - ui = GUI('script-Lyrics-main.xml', os.getcwd(), 'LCARS', True)<br /> ui.[#WindowXMLDialog-doModal doModal]()<br /> del ui<br /></tt>
|-
| width="100%" |
; Method resolution order:
: [xbmcgui.html#WindowXMLDialog WindowXMLDialog]
: [xbmcgui.html#WindowXML WindowXML]
: [xbmcgui.html#Window Window]
: [__builtin__.html#object __builtin__.object]
----
 Data and other attributes defined here:<br />
; '''__new__''' = <built-in method __new__ of type object>
: <tt>T.[#WindowXMLDialog-__new__ __new__](S, ...) -> a new [__builtin__.html#object object] with type S, a subtype of T</tt>
----
 Methods inherited from [xbmcgui.html#WindowXML WindowXML]<nowiki>:</nowiki><br />
; '''addItem'''(...)
: <tt>[#WindowXMLDialog-addItem addItem](item[, position]) -- Add a new item to this [#Window Window] List.<br /><br /> item : string, unicode or [#ListItem ListItem] - item to add.<br /> position : [opt] integer - position of item to add. (NO Int = Adds to bottom,0 adds to top, 1 adds to one below from top,-1 adds to one above from bottom etc etc )<br /> - If integer positions are greater than list size, negative positions will add to top of list, positive positions will add to bottom of list<br /> example:<br /> - [#WindowXMLDialog-addItem addItem]('Reboot XBMC', 0)</tt>
; '''clearList'''(...)
: <tt>[#WindowXMLDialog-clearList clearList]() -- Clear the [#Window Window] List.<br /><br /> example:<br /> - [#WindowXMLDialog-clearList clearList]()</tt>
; '''getCurrentListPosition'''(...)
: <tt>[#WindowXMLDialog-getCurrentListPosition getCurrentListPosition]() -- Gets the current position in the [#Window Window] List.<br /><br /> example:<br /> - pos = [#WindowXMLDialog-getCurrentListPosition getCurrentListPosition]()</tt>
; '''getListItem'''(...)
: <tt>[#WindowXMLDialog-getListItem getListItem](position) -- Returns a given [#ListItem ListItem] in this [#Window Window] List.<br /><br /> position : integer - position of item to return.<br /><br /> example:<br /> - listitem = [#WindowXMLDialog-getListItem getListItem](6)</tt>
; '''getListSize'''(...)
: <tt>[#WindowXMLDialog-getListSize getListSize]() -- Returns the number of items in this [#Window Window] List.<br /><br /> example:<br /> - listSize = [#WindowXMLDialog-getListSize getListSize]()</tt>
; '''removeItem'''(...)
: <tt>[#WindowXMLDialog-removeItem removeItem](position) -- Removes a specified item based on position, from the [#Window Window] List.<br /><br /> position : integer - position of item to remove.<br /><br /> example:<br /> - [#WindowXMLDialog-removeItem removeItem](5)</tt>
; '''setCurrentListPosition'''(...)
: <tt>[#WindowXMLDialog-setCurrentListPosition setCurrentListPosition](position) -- Set the current position in the [#Window Window] List.<br /><br /> position : integer - position of item to set.<br /><br /> example:<br /> - [#WindowXMLDialog-setCurrentListPosition setCurrentListPosition](5)</tt>
; '''setProperty'''(...)
: <tt>[#WindowXMLDialog-setProperty setProperty](key, value) -- Sets a container property, similar to an infolabel.<br /><br /> key : string - property name.<br /> value : string or unicode - value of property.<br /><br /> *Note, Key is NOT case sensitive.<br /> You can use the above as keywords for arguments and skip certain optional arguments.<br /> Once you use a keyword, all following arguments require the keyword.<br /><br /> example:<br /> - [#WindowXMLDialog-setProperty setProperty]('Category', 'Newest')</tt>
----
 Methods inherited from [xbmcgui.html#Window Window]<nowiki>:</nowiki><br />
; '''addControl'''(...)
: <tt>[#WindowXMLDialog-addControl addControl](self, Control) -- Add a Control to this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> ReferenceError, if control is already used in another window<br /> RuntimeError, should not happen :-)<br /><br /> The next controls can be added to a window atm<br /><br /> -[#ControlLabel ControlLabel]<br /> -[#ControlFadeLabel ControlFadeLabel]<br /> -[#ControlTextBox ControlTextBox]<br /> -[#ControlButton ControlButton]<br /> -[#ControlCheckMark ControlCheckMark]<br /> -[#ControlList ControlList]<br /> -[#ControlGroup ControlGroup]<br /> -[#ControlImage ControlImage]<br /> -[#ControlRadioButton ControlRadioButton]<br /> -[#ControlProgress ControlProgress]</tt>
; '''close'''(...)
: <tt>[#WindowXMLDialog-close close](self) -- Closes this window.<br /><br /> Closes this window by activating the old window.<br /> The window is not deleted with this method.</tt>
; '''doModal'''(...)
: <tt>[#WindowXMLDialog-doModal doModal](self) -- Display this window until [#WindowXMLDialog-close close]() is called.</tt>
; '''getControl'''(...)
: <tt>[#WindowXMLDialog-getControl getControl](self, int controlId) -- Get's the control from this window.<br /><br /> Throws: Exception, if Control doesn't exist<br /><br /> controlId doesn't have to be a python control, it can be a control id<br /> from a xbmc window too (you can find id's in the xml files<br /><br /> Note, not python controls are not completely usable yet<br /> You can only use the Control functions</tt>
; '''getFocus'''(...)
: <tt>[#WindowXMLDialog-getFocus getFocus](self, Control) -- returns the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getFocusId'''(...)
: <tt>[#WindowXMLDialog-getFocusId getFocusId](self, int) -- returns the id of the control which is focused.<br /> Throws: SystemError, on Internal error<br /> RuntimeError, if no control has focus</tt>
; '''getHeight'''(...)
: <tt>[#WindowXMLDialog-getHeight getHeight](self) -- Returns the height of this screen.</tt>
; '''getResolution'''(...)
: <tt>[#WindowXMLDialog-getResolution getResolution](self) -- Returns the resolution of the screen. The returned value is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''getWidth'''(...)
: <tt>[#WindowXMLDialog-getWidth getWidth](self) -- Returns the width of this screen.</tt>
; '''onAction'''(...)
: <tt>[#WindowXMLDialog-onAction onAction](self, [#Action Action] action) -- onAction method.<br /><br /> This method will recieve all actions that the main program will send<br /> to this window.<br /> By default, only the PREVIOUS_MENU action is handled.<br /> Overwrite this method to let your script handle all actions.<br /> Don't forget to capture ACTION_PREVIOUS_MENU, else the user can't close this window.</tt>
; '''removeControl'''(...)
: <tt>[#WindowXMLDialog-removeControl removeControl](self, Control) -- Removes the control from this window.<br /><br /> Throws: TypeError, if supplied argument is not a Control type<br /> RuntimeError, if control is not added to this window<br /><br /> This will not delete the control. It is only removed from the window.</tt>
; '''setCoordinateResolution'''(...)
: <tt>[#WindowXMLDialog-setCoordinateResolution setCoordinateResolution](self, int resolution) -- Sets the resolution<br /> that the coordinates of all controls are defined in. Allows XBMC<br /> to scale control positions and width/heights to whatever resolution<br /> XBMC is currently using.<br /> resolution is one of the following:<br /> 0 - 1080i (1920x1080)<br /> 1 - 720p (1280x720)<br /> 2 - 480p 4:3 (720x480)<br /> 3 - 480p 16:9 (720x480)<br /> 4 - NTSC 4:3 (720x480)<br /> 5 - NTSC 16:9 (720x480)<br /> 6 - PAL 4:3 (720x576)<br /> 7 - PAL 16:9 (720x576)<br /> 8 - PAL60 4:3 (720x480)<br /> 9 - PAL60 16:9 (720x480)</tt>
; '''setFocus'''(...)
: <tt>[#WindowXMLDialog-setFocus setFocus](self, Control) -- Give the supplied control focus.<br /> Throws: TypeError, if supplied argument is not a Control type<br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''setFocusId'''(...)
: <tt>[#WindowXMLDialog-setFocusId setFocusId](self, int) -- Gives the control with the supplied focus.<br /> Throws: <br /> SystemError, on Internal error<br /> RuntimeError, if control is not added to a window</tt>
; '''show'''(...)
: <tt>[#WindowXMLDialog-show show](self) -- Show this window.<br /><br /> Shows this window by activating it, calling [#WindowXMLDialog-close close]() after it wil activate the<br /> current window again.<br /> Note, if your script ends this window will be closed to. To show it forever, <br /> make a loop at the end of your script ar use [#WindowXMLDialog-doModal doModal]() instead</tt>
|}
|}

{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#eeaa77"
| colspan="3" valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><big>'''Functions'''</big></font>
|-
| bgcolor="#eeaa77" |
| width="100%" |
; '''getCurrentWindowDialogId'''(...)
: <tt>[#-getCurrentWindowDialogId getCurrentWindowDialogId]() -- Returns the id for the current 'active' dialog as an integer.<br /><br /> example:<br /> - wid = xbmcgui.[#-getCurrentWindowDialogId getCurrentWindowDialogId]()</tt>
; '''getCurrentWindowId'''(...)
: <tt>[#-getCurrentWindowId getCurrentWindowId]() -- Returns the id for the current 'active' window as an integer.<br /><br /> example:<br /> - wid = xbmcgui.[#-getCurrentWindowId getCurrentWindowId]()</tt>
; '''lock'''(...)
: <tt>[#-lock lock]() -- Lock the gui until xbmcgui.[#-unlock unlock]() is called.<br /><br /> *Note, This will improve performance when doing a lot of gui manipulation at once.<br /> The main program (xbmc itself) will freeze until xbmcgui.[#-unlock unlock]() is called.<br /><br /> example:<br /> - xbmcgui.[#-lock lock]()</tt>
; '''unlock'''(...)
: <tt>[#-unlock unlock]() -- Unlock the gui from a [#-lock lock]() call.<br /><br /> example:<br /> - xbmcgui.[#-unlock unlock]()</tt>
|}

{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#55aa55"
| colspan="3" valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><big>'''Data'''</big></font>
|-
| bgcolor="#55aa55" |
| width="100%" | '''ICON_OVERLAY_HAS_TRAINER''' = 4<br />'''ICON_OVERLAY_HD''' = 8<br />'''ICON_OVERLAY_LOCKED''' = 3<br />'''ICON_OVERLAY_NONE''' = 0<br />'''ICON_OVERLAY_RAR''' = 1<br />'''ICON_OVERLAY_TRAINED''' = 5<br />'''ICON_OVERLAY_UNWATCHED''' = 6<br />'''ICON_OVERLAY_WATCHED''' = 7<br />'''ICON_OVERLAY_ZIP''' = 2<br />'''__author__''' = 'J. Mulder <darkie@xbmc.org>'<br />'''__credits__''' = 'XBMC TEAM.'<br />'''__date__''' = '14 July 2006'<br />'''__platform__''' = 'XBOX'<br />'''__version__''' = '1.2'
|}

{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#7799ee"
| colspan="3" valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><big>'''Author'''</big></font>
|-
| bgcolor="#7799ee" |
| width="100%" | J. Mulder <darkie@xbmc.org>
|}

{| summary="section" width="100%" cellpadding="2"
|- bgcolor="#7799ee"
| colspan="3" valign="bottom" | <br /><font color="#ffffff" face="helvetica, arial"><big>'''Credits'''</big></font>
|-
| bgcolor="#7799ee" |
| width="100%" | XBMC TEAM.
|}